建造者的应用案例
一：用建造者（Builder）模式描述客厅装修。

二：分析：
客厅装修是一个复杂的过程，它包含墙体的装修、电视机的选择、沙发的购买与布局等。
客户把装修要求告诉项目经理，项目经理(指挥者)指挥装修工人(抽象建造者)一步步装修，最后完成整个客厅的装修与布局，所以本实例用建造者模式实现比较适合。

这里客厅是产品，包括墙、电视和沙发等组成部分。具体装修工人是具体建造者，他们负责装修与墙、电视和沙发的布局。
项目经理是指挥者，他负责指挥装修工人进行装修。

另外，客厅类中提供了 show() 方法，可以将装修效果图显示出来（点此下载装修效果图的图片）。
客户端程序通过对象生成器类 ReadXML 读取 XML 配置文件中的装修方案数据（点此下载 XML 文件），调用项目经理进行装修。

三：建造者的主要角色
1.产品角色（Product）          =====> 客厅（Parlour）
2.抽象建造者（Builder）         =====> 装修工人（Decorator）
3.具体建造者(Concrete Builder）=====> 具体装修工人（ConcreteDecorator1）、（ConcreteDecorator2）
4.指挥者（Director）           =====> 项目经理（ProjectManager）

四：通常在以下场合使用。

创建的对象较复杂，由多个部件构成，各部件面临着复杂的变化，但构件间的建造顺序是稳定的。
创建复杂对象的算法独立于该对象的组成部分以及它们的装配方式，即产品的构建过程和最终的表示是独立的。


五：其他
==模式的应用场景==
建造者模式唯一区别于工厂模式的是针对复杂对象的创建。
也就是说，如果创建简单对象，通常都是使用工厂模式进行创建，而如果创建复杂对象，就可以考虑使用建造者模式。

当需要创建的产品具备复杂创建过程时，可以抽取出共性创建过程，然后交由具体实现类自定义创建流程，
使得同样的创建行为可以生产出不同的产品，分离了创建与表示，使创建产品的灵活性大大增加。

==建造者模式主要适用于以下应用场景==：
1.相同的方法，不同的执行顺序，产生不同的结果。
2.多个部件或零件，都可以装配到一个对象中，但是产生的结果又不相同。
3.产品类非常复杂，或者产品类中不同的调用顺序产生不同的作用。
4.初始化一个对象特别复杂，参数多，而且很多参数都具有默认值。

==建造者模式和工厂模式的区别==
1.通过前面的学习，我们已经了解了建造者模式，那么它和工厂模式有什么区别呢？
2.建造者模式更加注重方法的调用顺序，工厂模式注重创建对象。
3.创建对象的力度不同，建造者模式创建复杂的对象，由各种复杂的部件组成，工厂模式创建出来的对象都一样
4.关注重点不一样，工厂模式只需要把对象创建出来就可以了，而建造者模式不仅要创建出对象，还要知道对象由哪些部件组成。
建造者模式根据建造过程中的顺序不一样，最终对象部件组成也不一样。
模式的扩展
建造者（Builder）模式在应用过程中可以根据需要改变，如果创建的产品种类只有一种，只需要一个具体建造者，这时可以省略掉抽象建造者，甚至可以省略掉指挥者角色